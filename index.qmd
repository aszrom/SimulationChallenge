

---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default
  pdf: default
execute:
  echo: true
  eval: true
---

# üé≤ Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

## The Investment Game üéØ

### Original Game Strategy

::: {#exm-ErgodicityEconomicsExample}
Imagine you are offered the following game and given a $1,000 budget in a special account to play the game: I will flip a coin, and if it comes up heads, we increase your account's balance by 50%; if it comes up tails, we reduce your account's balance by 40%. We are not only doing this once, but we will do it once per year until you turn 55. When you turn 55, you will receive the balance in your account.
:::

### Generative DAG Model for the Investment Game

```{python}
#| echo: false
#| include: false
#| eval: false
import daft

# Create the DAG directly without custom class
investmentDAG = daft.PGM(dpi=150, alternate_style="outer")

# Initial wealth (deterministic)
investmentDAG.add_node("W0", "Initial Wealth\n$W_0 = 1000$", x=4, y=2.5, aspect=5.4, 
                      alternate=True, plot_params={'facecolor': 'aliceblue'})

# Time t nodes  
investmentDAG.add_node("Ct", "Coin Flip t\n$C_t \\sim \\text{Bernoulli}(0.5)$", x=0, y=1, aspect=4, scale = 1.6,
                      plot_params={'facecolor': 'aliceblue'})
investmentDAG.add_node("Wt", "\nWealth t\n$W_t = 1.5 \\times W_{t-1}$ if $C_t = 1$\n$W_t = 0.6 \\times W_{t-1}$ if $C_t = 0$\n", x=4, y=1, scale = 1.6, aspect=4,
                      alternate=True, plot_params={'facecolor': 'aliceblue'})

# Add edges showing the relationships
investmentDAG.add_edge("W0", "Wt")
investmentDAG.add_edge("Ct", "Wt")

# Add plate around time-dependent nodes
investmentDAG.add_plate([-2, 0.5, 7.8, 1.0], label="t = 1, ..., N", shift=-0.1)
```

```{python}
#| label: fig-investment-dag
#| fig-cap: Generative DAG model for the investment game showing how wealth evolves over time through coin flips
#| echo: false
#| eval: false
investmentDAG.show()
```

## Challenge Requirements üìã

### Questions to Answer for 75% Grade on Challenge

1. **Expected Value Analysis:** What is the "expected value" of your account balance after 1 coin flip for the original game?

2. **Expectation vs. Reality:** Is the expected value positive or negative? Do you expect your account to be worth more or less than $1,000 based on this result?

3. **Single Simulation:** Run one simulation showing the dynamics of your account balance over time. Make an object-oriented matplotlib OR ggplot2 plot showing your simulated account balance over time (i.e. as you age). Comment on the results, are you happy?

## Analysis and Solutions

### Question 1: Expected Value Analysis

**What is the "expected value" of your account balance after 1 coin flip for the original game?**

Let's calculate this step by step using R:

```{r}
#| label: expected-value-analysis
#| fig-cap: Expected value calculation for the investment game
#| echo: true

# Load required libraries
suppressPackageStartupMessages(library(tidyverse))

# Game parameters
initial_balance <- 1000
heads_multiplier <- 1.5  # +50% gain
tails_multiplier <- 0.6  # -40% loss
probability_heads <- 0.5

# Calculate expected value after 1 coin flip
# E[W1] = P(Heads) * W0 * 1.5 + P(Tails) * W0 * 0.6
# E[W1] = 0.5 * 1000 * 1.5 + 0.5 * 1000 * 0.6
# E[W1] = 0.5 * 1500 + 0.5 * 600
# E[W1] = 750 + 300 = 1050

expected_value_after_one_flip <- probability_heads * initial_balance * heads_multiplier + 
                                 (1 - probability_heads) * initial_balance * tails_multiplier

# Display the calculation
cat("Expected Value Calculation:\n")
cat("========================\n")
cat("Initial Balance: $", initial_balance, "\n")
cat("Heads (50% chance): $", initial_balance, " √ó 1.5 = $", initial_balance * heads_multiplier, "\n")
cat("Tails (50% chance): $", initial_balance, " √ó 0.6 = $", initial_balance * tails_multiplier, "\n")
cat("\nExpected Value = 0.5 √ó $", initial_balance * heads_multiplier, " + 0.5 √ó $", initial_balance * tails_multiplier, "\n")
cat("Expected Value = $", probability_heads * initial_balance * heads_multiplier, " + $", (1 - probability_heads) * initial_balance * tails_multiplier, "\n")
cat("Expected Value = $", expected_value_after_one_flip, "\n")

# Verify with simulation
set.seed(123)
n_sims <- 10000

# Simulate 10,000 single coin flips
simulated_balances <- replicate(n_sims, {
  coin_flip <- rbinom(1, 1, probability_heads)
  if (coin_flip == 1) {
    initial_balance * heads_multiplier
  } else {
    initial_balance * tails_multiplier
  }
})

# Calculate mean of simulations
simulated_expected_value <- mean(simulated_balances)

cat("\nSimulation Verification:\n")
cat("=======================\n")
cat("Simulated Expected Value (10,000 trials): $", round(simulated_expected_value, 2), "\n")
cat("Theoretical Expected Value: $", expected_value_after_one_flip, "\n")
cat("Difference: $", round(abs(simulated_expected_value - expected_value_after_one_flip), 2), "\n")
```

### Question 2: Expectation vs. Reality

**Is the expected value positive or negative? Do you expect your account to be worth more or less than $1,000 based on this result?**

```{r}
#| label: expectation-analysis
#| fig-cap: Analysis of expected value vs initial investment
#| echo: true

# Analysis of the expected value
cat("Expectation vs. Reality Analysis:\n")
cat("================================\n")
cat("Initial Investment: $", initial_balance, "\n")
cat("Expected Value after 1 flip: $", expected_value_after_one_flip, "\n")
cat("Expected Gain/Loss: $", expected_value_after_one_flip - initial_balance, "\n")
cat("Expected Return: ", round((expected_value_after_one_flip - initial_balance) / initial_balance * 100, 1), "%\n")

if (expected_value_after_one_flip > initial_balance) {
  cat("\n‚úÖ The expected value is POSITIVE!\n")
  cat("Based on this result, I expect my account to be worth MORE than $1,000.\n")
  cat("This suggests the game is favorable in the long run.\n")
} else {
  cat("\n‚ùå The expected value is NEGATIVE!\n")
  cat("Based on this result, I expect my account to be worth LESS than $1,000.\n")
  cat("This suggests the game is unfavorable in the long run.\n")
}

# However, let's think about this more carefully...
cat("\nü§î But wait! Let's think about this more carefully...\n")
cat("The expected value calculation assumes we can play this game many times.\n")
cat("But in reality, we only get to play once per year until age 55.\n")
cat("This is a key insight about ergodicity economics!\n")
```


